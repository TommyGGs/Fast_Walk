diff --git a/Fast_Walk.xcodeproj/project.pbxproj b/Fast_Walk.xcodeproj/project.pbxproj
index 795d35d..3674771 100644
Binary files a/Fast_Walk.xcodeproj/project.pbxproj and b/Fast_Walk.xcodeproj/project.pbxproj differ
diff --git a/Fast_Walk/HealthKit demo/EndScreenViewController.swift b/Fast_Walk/HealthKit demo/EndScreenViewController.swift
index 25caef2..2055ca0 100644
--- a/Fast_Walk/HealthKit demo/EndScreenViewController.swift	
+++ b/Fast_Walk/HealthKit demo/EndScreenViewController.swift	
@@ -6,3 +6,101 @@
 //
 
 import Foundation
+import UIKit
+import HealthKit
+import CareKitUI
+import CareKit
+
+class EndScreenViewController: UIViewController {
+    
+    
+    let store = HealthAndCareKitHelp.healthStore
+    var help = HealthAndCareKitHelp()
+    
+    override func viewWillAppear(_ animated: Bool) {
+        super.viewWillAppear(animated)
+        
+        authorizeHealthKit()
+        fetchStepData() { results in
+            DispatchQueue.main.async{
+                self.createChart(results)
+            }
+            
+        }
+        
+        
+    }
+    //Authorize HealthKit
+    func authorizeHealthKit() {
+        guard HKHealthStore.isHealthDataAvailable() else {
+            return
+        }
+        
+        let readTypes = Set([HKObjectType.quantityType(forIdentifier: .stepCount)!])
+        
+        store.requestAuthorization(toShare: nil, read: readTypes) { (success, error) in
+            if !success {
+                // Handle errors here.
+                print("error requesting authorization")
+            }
+        }
+    }
+    //fetchSteps for last 7 days, by day.
+    func fetchStepData(completion: @escaping ([Int]) -> Void) {
+        guard let stepsQuantityType = HKQuantityType.quantityType(forIdentifier: .stepCount) else {
+            completion([])
+            return
+        }
+
+        let now = Date()
+        let startOfDay = Calendar.current.startOfDay(for: now)
+        let startDate = Calendar.current.date(byAdding: .day, value: -6, to: startOfDay) // last 7 days including today
+        let predicate = HKQuery.predicateForSamples(withStart: startDate, end: now, options: .strictStartDate)
+
+        var dateComponents = DateComponents()
+        dateComponents.day = 1
+
+        let query = HKStatisticsCollectionQuery(quantityType: stepsQuantityType,
+                                                quantitySamplePredicate: predicate,
+                                                options: .cumulativeSum,
+                                                anchorDate: startDate!,
+                                                intervalComponents: dateComponents)
+
+        query.initialResultsHandler = { query, results, error in
+            guard let statsCollection = results else {
+                completion([])
+                return
+            }
+
+            var dailySteps = [Int]()
+            let endDate = Calendar.current.startOfDay(for: now)
+            statsCollection.enumerateStatistics(from: startDate!, to: endDate) { statistics, stop in
+                let count = statistics.sumQuantity()?.doubleValue(for: HKUnit.count()) ?? 0
+                dailySteps.append(Int(count))
+            }
+
+            completion(dailySteps)
+        }
+
+        store.execute(query)
+    }
+    
+    func createChart(_ stepsArray: [Int]) {
+        let series = OCKDataSeries(
+                values: stepsArray.map { CGFloat($0) },
+                title: "Steps",
+                size: 10,
+                color: .systemBlue
+            )
+
+        let chartView = OCKCartesianChartView(type: .bar)
+        chartView.translatesAutoresizingMaskIntoConstraints = false
+        chartView.headerView.titleLabel.text = "Steps"
+        chartView.graphView.horizontalAxisMarkers = help.createHorizontalAxisMarkers()
+
+        chartView.graphView.dataSeries = [series]
+        view.addSubview(chartView)
+        }
+    
+    
+}
diff --git a/Fast_Walk/HealthKit demo/HealthKitData.swift b/Fast_Walk/HealthKit demo/HealthKitData.swift
index d35ef0a..f1806a1 100644
--- a/Fast_Walk/HealthKit demo/HealthKitData.swift	
+++ b/Fast_Walk/HealthKit demo/HealthKitData.swift	
@@ -7,11 +7,51 @@
 
 import Foundation
 import HealthKit
+import CareKit
+import CareKitUI
 
-class HealthKitData {
+class HealthAndCareKitHelp {
     static let healthStore: HKHealthStore = HKHealthStore()
     
     func addGraph (){
         
     }
+    
+    private func createMonthDayDateFormatter() -> DateFormatter {
+        let dateFormatter = DateFormatter()
+        
+        dateFormatter.dateFormat = "MM/dd"
+        
+        return dateFormatter
+    }
+    
+    func createHorizontalAxisMarkers(lastDate: Date = Date(), useWeekdays: Bool = true) -> [String] {
+        let calendar: Calendar = .current
+        let weekdayTitles = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]
+        
+        var titles: [String] = []
+        
+        if useWeekdays {
+            titles = weekdayTitles
+            
+            let weekday = calendar.component(.weekday, from: lastDate)
+            
+            return Array(titles[weekday..<titles.count]) + Array(titles[0..<weekday])
+        } else {
+            let numberOfTitles = weekdayTitles.count
+            let endDate = lastDate
+            let startDate = calendar.date(byAdding: DateComponents(day: -(numberOfTitles - 1)), to: endDate)!
+            
+            let dateFormatter = createMonthDayDateFormatter()
+
+            var date = startDate
+            
+            while date <= endDate {
+                titles.append(dateFormatter.string(from: date))
+                date = calendar.date(byAdding: .day, value: 1, to: date)!
+            }
+            
+            return titles
+        }
+    }
 }
diff --git a/Fast_Walk/HealthKit demo/HealthKitDemo.storyboard b/Fast_Walk/HealthKit demo/HealthKitDemo.storyboard
index 6d26e1b..a70a6ae 100644
--- a/Fast_Walk/HealthKit demo/HealthKitDemo.storyboard	
+++ b/Fast_Walk/HealthKit demo/HealthKitDemo.storyboard	
@@ -1,9 +1,9 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<document type="com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB" version="3.0" toolsVersion="22155" targetRuntime="iOS.CocoaTouch" propertyAccessControl="none" useAutolayout="YES" useTraitCollections="YES" useSafeAreas="YES" colorMatched="YES">
+<document type="com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB" version="3.0" toolsVersion="22505" targetRuntime="iOS.CocoaTouch" propertyAccessControl="none" useAutolayout="YES" useTraitCollections="YES" useSafeAreas="YES" colorMatched="YES">
     <device id="retina6_12" orientation="portrait" appearance="light"/>
     <dependencies>
         <deployment identifier="iOS"/>
-        <plugIn identifier="com.apple.InterfaceBuilder.IBCocoaTouchPlugin" version="22131"/>
+        <plugIn identifier="com.apple.InterfaceBuilder.IBCocoaTouchPlugin" version="22504"/>
         <capability name="Safe area layout guides" minToolsVersion="9.0"/>
         <capability name="System colors in document resources" minToolsVersion="11.0"/>
         <capability name="documents saved in the Xcode 8 format" minToolsVersion="8.0"/>
@@ -22,9 +22,6 @@
                                 <autoresizingMask key="autoresizingMask" flexibleMaxX="YES" flexibleMaxY="YES"/>
                                 <state key="normal" title="Button"/>
                                 <buttonConfiguration key="configuration" style="filled" title="Fetch Steps from HealthKit"/>
-                                <connections>
-                                    <action selector="press:" destination="Y6W-OH-hqX" eventType="touchUpInside" id="LgM-nk-Egt"/>
-                                </connections>
                             </button>
                             <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" fixedFrame="YES" text="Steps for this week:" textAlignment="center" lineBreakMode="tailTruncation" numberOfLines="0" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="K9a-U1-hFQ">
                                 <rect key="frame" x="36" y="349" width="320" height="21"/>
@@ -37,9 +34,6 @@
                         <viewLayoutGuide key="safeArea" id="vDu-zF-Fre"/>
                         <color key="backgroundColor" systemColor="systemBackgroundColor"/>
                     </view>
-                    <connections>
-                        <outlet property="stepsLabel" destination="K9a-U1-hFQ" id="KcN-6c-Air"/>
-                    </connections>
                 </viewController>
                 <placeholder placeholderIdentifier="IBFirstResponder" id="Ief-a0-LHa" userLabel="First Responder" customClass="UIResponder" sceneMemberID="firstResponder"/>
             </objects>
diff --git a/Fast_Walk/HealthKit demo/HealthKitDemoViewController.swift b/Fast_Walk/HealthKit demo/HealthKitDemoViewController.swift
index 9891af9..d13c22a 100644
--- a/Fast_Walk/HealthKit demo/HealthKitDemoViewController.swift	
+++ b/Fast_Walk/HealthKit demo/HealthKitDemoViewController.swift	
@@ -1,39 +1,36 @@
-//
-//  Healthdata.swift
-//  Fast_Walk
-//
-//  Created by visitor on 2024/01/02.
-//
-
-import Foundation
 import UIKit
 import HealthKit
+import CareKit
+import CareKitUI
 
 class HealthKitDemoViewController: UIViewController {
     
     @IBOutlet weak var stepsLabel: UILabel!
-    
-    
-    let store = HealthKitData.healthStore
-    
-    
+
+    let healthStore = HKHealthStore()
+    var anchor: HKQueryAnchor?
+    //var timer: Timer!
+
     override func viewWillAppear(_ animated: Bool) {
         super.viewWillAppear(animated)
         authorizeHealthKit()
-        
-        
     }
-    
-    @IBAction func press(_ sender: Any) {
-        
-        fetchStepData { steps in
-            DispatchQueue.main.async {
-                self.stepsLabel.text = "\(steps) steps"
-                self.updateStepsLabel(steps)
-            }
-        }
+
+    func startWorkoutSession() {
+        startObservingSteps()
+//        timer = Timer.scheduledTimer(timeInterval: 180, target: self, selector: #selector(updateStepCount), userInfo: nil, repeats: true)
     }
-    //Authorize HealthKit
+
+    func endWorkoutSession() {
+//        timer?.invalidate()
+//        timer = nil
+    }
+
+    @objc func updateStepCount() {
+        fetchStepData()
+    }
+
+    // Authorization
     func authorizeHealthKit() {
         guard HKHealthStore.isHealthDataAvailable() else {
             return
@@ -41,55 +38,42 @@ class HealthKitDemoViewController: UIViewController {
         
         let readTypes = Set([HKObjectType.quantityType(forIdentifier: .stepCount)!])
         
-        store.requestAuthorization(toShare: nil, read: readTypes) { (success, error) in
+        healthStore.requestAuthorization(toShare: nil, read: readTypes) { (success, error) in
             if !success {
                 // Handle errors here.
-                print("error requesting authorization")
+                print("Error requesting authorization: \(String(describing: error))")
             }
         }
     }
-    //fetchSteps for last 7 days, by day.
-    func fetchStepData(completion: @escaping ([Int]) -> Void) {
-        guard let stepsQuantityType = HKQuantityType.quantityType(forIdentifier: .stepCount) else {
-            completion([])
+
+    // Fetch Steps
+    func fetchStepData() {
+        guard let stepsType = HKObjectType.quantityType(forIdentifier: .stepCount) else {
             return
         }
 
-        let now = Date()
-        let startOfDay = Calendar.current.startOfDay(for: now)
-        let startDate = Calendar.current.date(byAdding: .day, value: -6, to: startOfDay) // last 7 days including today
-        let predicate = HKQuery.predicateForSamples(withStart: startDate, end: now, options: .strictStartDate)
-
-        var dateComponents = DateComponents()
-        dateComponents.day = 1
-
-        let query = HKStatisticsCollectionQuery(quantityType: stepsQuantityType,
-                                                quantitySamplePredicate: predicate,
-                                                options: .cumulativeSum,
-                                                anchorDate: startDate!,
-                                                intervalComponents: dateComponents)
-
-        query.initialResultsHandler = { query, results, error in
-            guard let statsCollection = results else {
-                completion([])
-                return
+        let query = HKAnchoredObjectQuery(type: stepsType, predicate: nil, anchor: anchor, limit: HKObjectQueryNoLimit) { [weak self] query, sampleObjects, deletedObjects, newAnchor, error in
+            guard let self = self else { return }
+            
+            if let newAnchor = newAnchor {
+                self.anchor = newAnchor
             }
 
-            var dailySteps = [Int]()
-            let endDate = Calendar.current.startOfDay(for: now)
-            statsCollection.enumerateStatistics(from: startDate!, to: endDate) { statistics, stop in
-                let count = statistics.sumQuantity()?.doubleValue(for: HKUnit.count()) ?? 0
-                dailySteps.append(Int(count))
+            if let samples = sampleObjects as? [HKQuantitySample] {
+                let totalSteps = samples.map { $0.quantity.doubleValue(for: HKUnit.count()) }.reduce(0, +)
+                DispatchQueue.main.async {
+                    self.stepsLabel.text = "Steps: \(Int(totalSteps))"
+                }
             }
-
-            completion(dailySteps)
         }
 
-        store.execute(query)
+        healthStore.execute(query)
     }
     
-    private func updateStepsLabel(_ stepsArray: [Int]) {
-            let stepsString = stepsArray.map { String($0) }.joined(separator: ",")
-            stepsLabel.text = stepsString
-        }
-}
+
+    // Start Observing Steps
+    func startObservingSteps() {
+        fetchStepData()
+    }
+    
+  }
diff --git a/Fast_Walk/Info.plist b/Fast_Walk/Info.plist
index 0f8f15c..5e56ca4 100644
--- a/Fast_Walk/Info.plist
+++ b/Fast_Walk/Info.plist
@@ -29,5 +29,16 @@
 	<string>We need your location to enhance your experience even when the app is in the background</string>
 	<key>NSHealthShareUsageDescription</key>
 	<string>Please give us health data to try the health functionalities</string>
+    <key>GIDClientID</key>
+    <string>503499248889-jb3cpasrmc02g0bqf8q2hdmt2cie7s18.apps.googleusercontent.com</string>
+    <key>CFBundleURLTypes</key>
+    <array>
+      <dict>
+        <key>CFBundleURLSchemes</key>
+        <array>
+          <string>YOUR_DOT_REVERSED_IOS_CLIENT_ID</string>
+        </array>
+      </dict>
+    </array>
 </dict>
 </plist>
diff --git a/Fast_Walk/Main.storyboard b/Fast_Walk/Main.storyboard
index b439966..9a2e968 100644
--- a/Fast_Walk/Main.storyboard
+++ b/Fast_Walk/Main.storyboard
@@ -1,9 +1,10 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<document type="com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB" version="3.0" toolsVersion="21225" targetRuntime="iOS.CocoaTouch" propertyAccessControl="none" useAutolayout="YES" useTraitCollections="YES" useSafeAreas="YES" colorMatched="YES" initialViewController="BYZ-38-t0r">
+<document type="com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB" version="3.0" toolsVersion="22505" targetRuntime="iOS.CocoaTouch" propertyAccessControl="none" useAutolayout="YES" useTraitCollections="YES" useSafeAreas="YES" colorMatched="YES" initialViewController="BYZ-38-t0r">
     <device id="retina6_0" orientation="portrait" appearance="light"/>
     <dependencies>
         <deployment identifier="iOS"/>
-        <plugIn identifier="com.apple.InterfaceBuilder.IBCocoaTouchPlugin" version="21207"/>
+        <plugIn identifier="com.apple.InterfaceBuilder.IBCocoaTouchPlugin" version="22504"/>
+        <capability name="Image references" minToolsVersion="12.0"/>
         <capability name="Safe area layout guides" minToolsVersion="9.0"/>
         <capability name="System colors in document resources" minToolsVersion="11.0"/>
         <capability name="documents saved in the Xcode 8 format" minToolsVersion="8.0"/>
@@ -232,66 +233,87 @@
                         <autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/>
                         <subviews>
                             <view contentMode="scaleToFill" fixedFrame="YES" translatesAutoresizingMaskIntoConstraints="NO" id="nsc-rK-tJr">
-                                <rect key="frame" x="0.0" y="0.0" width="390" height="585"/>
+                                <rect key="frame" x="0.0" y="0.0" width="390" height="481"/>
                                 <autoresizingMask key="autoresizingMask" flexibleMaxX="YES" flexibleMaxY="YES"/>
                                 <color key="backgroundColor" systemColor="systemBackgroundColor"/>
                             </view>
-                            <button opaque="NO" contentMode="scaleToFill" fixedFrame="YES" contentHorizontalAlignment="center" contentVerticalAlignment="center" buttonType="system" lineBreakMode="middleTruncation" translatesAutoresizingMaskIntoConstraints="NO" id="hwT-Fe-fZt">
-                                <rect key="frame" x="298" y="602" width="67" height="38"/>
-                                <autoresizingMask key="autoresizingMask" flexibleMaxX="YES" flexibleMaxY="YES"/>
-                                <state key="normal" title="Button"/>
-                                <buttonConfiguration key="configuration" style="filled" title="End"/>
-                                <connections>
-                                    <segue destination="n7d-qZ-gcw" kind="show" id="1As-vi-Hs6"/>
-                                </connections>
-                            </button>
-                            <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" fixedFrame="YES" text="Current" textAlignment="natural" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="Gvk-Im-cVz">
-                                <rect key="frame" x="145" y="690" width="110" height="21"/>
-                                <autoresizingMask key="autoresizingMask" flexibleMaxX="YES" flexibleMaxY="YES"/>
+                            <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" text="Current" textAlignment="center" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="Gvk-Im-cVz">
+                                <rect key="frame" x="40" y="754.33333333333337" width="58" height="21"/>
                                 <fontDescription key="fontDescription" type="system" pointSize="17"/>
                                 <nil key="textColor"/>
                                 <nil key="highlightedColor"/>
                             </label>
-                            <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" fixedFrame="YES" text="3:00" textAlignment="natural" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="hJg-q0-Edh">
-                                <rect key="frame" x="298" y="789" width="36" height="21"/>
-                                <autoresizingMask key="autoresizingMask" flexibleMaxX="YES" flexibleMaxY="YES"/>
-                                <fontDescription key="fontDescription" type="system" pointSize="17"/>
+                            <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" text="3:00" textAlignment="center" lineBreakMode="tailTruncation" numberOfLines="0" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="14s-Rl-VrW">
+                                <rect key="frame" x="95" y="440" width="200" height="200"/>
+                                <constraints>
+                                    <constraint firstAttribute="height" constant="200" id="N7m-WY-nRO"/>
+                                    <constraint firstAttribute="width" constant="200" id="hil-PU-1fd"/>
+                                </constraints>
+                                <fontDescription key="fontDescription" name="NotoSansKannada-Bold" family="Noto Sans Kannada" pointSize="58"/>
                                 <nil key="textColor"/>
                                 <nil key="highlightedColor"/>
                             </label>
-                            <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" fixedFrame="YES" text="Remaining Time" textAlignment="natural" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="R8W-rS-OAG">
-                                <rect key="frame" x="30" y="767" width="130" height="21"/>
-                                <autoresizingMask key="autoresizingMask" flexibleMaxX="YES" flexibleMaxY="YES"/>
+                            <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" text="Steps" textAlignment="center" lineBreakMode="tailTruncation" numberOfLines="0" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="qiU-10-KHL">
+                                <rect key="frame" x="173" y="641" width="44" height="20.333333333333371"/>
                                 <fontDescription key="fontDescription" type="system" pointSize="17"/>
                                 <nil key="textColor"/>
                                 <nil key="highlightedColor"/>
                             </label>
-                            <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" fixedFrame="YES" text="3:00" textAlignment="natural" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="14s-Rl-VrW">
-                                <rect key="frame" x="177" y="719" width="47" height="21"/>
-                                <autoresizingMask key="autoresizingMask" flexibleMaxX="YES" flexibleMaxY="YES"/>
+                            <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" text="Next" textAlignment="center" lineBreakMode="tailTruncation" numberOfLines="0" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="drO-cs-iXw">
+                                <rect key="frame" x="280" y="754.66666666666663" width="70" height="20.333333333333371"/>
+                                <constraints>
+                                    <constraint firstAttribute="width" constant="70" id="Rq5-ge-Jod"/>
+                                </constraints>
                                 <fontDescription key="fontDescription" type="system" pointSize="17"/>
                                 <nil key="textColor"/>
                                 <nil key="highlightedColor"/>
                             </label>
-                            <button opaque="NO" contentMode="scaleToFill" fixedFrame="YES" contentHorizontalAlignment="center" contentVerticalAlignment="center" buttonType="system" lineBreakMode="middleTruncation" translatesAutoresizingMaskIntoConstraints="NO" id="o2c-DZ-l6j">
-                                <rect key="frame" x="30" y="605" width="113" height="35"/>
-                                <autoresizingMask key="autoresizingMask" flexibleMaxX="YES" flexibleMaxY="YES"/>
+                            <button opaque="NO" contentMode="scaleToFill" contentHorizontalAlignment="center" contentVerticalAlignment="center" buttonType="system" lineBreakMode="middleTruncation" translatesAutoresizingMaskIntoConstraints="NO" id="o2c-DZ-l6j">
+                                <rect key="frame" x="175" y="571" width="40" height="40"/>
+                                <constraints>
+                                    <constraint firstAttribute="height" constant="40" id="XeE-ko-AMt"/>
+                                    <constraint firstAttribute="width" constant="40" id="aAq-7Y-FsH"/>
+                                </constraints>
                                 <state key="normal" title="Button"/>
-                                <buttonConfiguration key="configuration" style="filled" title="Start/Pause"/>
+                                <buttonConfiguration key="configuration" style="filled" title=" " imagePadding="0.0">
+                                    <imageReference key="image" image="playpause.fill" catalog="system" symbolScale="large"/>
+                                    <color key="baseForegroundColor" name="AccentColor"/>
+                                    <color key="baseBackgroundColor" white="1" alpha="0.0" colorSpace="custom" customColorSpace="genericGamma22GrayColorSpace"/>
+                                </buttonConfiguration>
                                 <connections>
                                     <action selector="startTimer" destination="5Oe-OB-C1X" eventType="touchUpInside" id="fH9-3d-4Fs"/>
                                 </connections>
                             </button>
-                            <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" fixedFrame="YES" text="Next" textAlignment="natural" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="drO-cs-iXw">
-                                <rect key="frame" x="275" y="767" width="99" height="21"/>
-                                <autoresizingMask key="autoresizingMask" flexibleMaxX="YES" flexibleMaxY="YES"/>
-                                <fontDescription key="fontDescription" type="system" pointSize="17"/>
-                                <nil key="textColor"/>
-                                <nil key="highlightedColor"/>
-                            </label>
+                            <button opaque="NO" contentMode="scaleToFill" contentHorizontalAlignment="center" contentVerticalAlignment="center" buttonType="system" lineBreakMode="middleTruncation" translatesAutoresizingMaskIntoConstraints="NO" id="hwT-Fe-fZt">
+                                <rect key="frame" x="148" y="670" width="94" height="40"/>
+                                <constraints>
+                                    <constraint firstAttribute="width" constant="94" id="1i3-7y-viU"/>
+                                </constraints>
+                                <state key="normal" title="Button"/>
+                                <buttonConfiguration key="configuration" style="filled" image="stop.circle.fill" catalog="system" imagePlacement="leading" title="End" imagePadding="15"/>
+                                <connections>
+                                    <action selector="endTimer" destination="5Oe-OB-C1X" eventType="touchUpInside" id="RLw-um-04w"/>
+                                    <segue destination="n7d-qZ-gcw" kind="show" id="1As-vi-Hs6"/>
+                                </connections>
+                            </button>
                         </subviews>
                         <viewLayoutGuide key="safeArea" id="qdJ-BB-eZ2"/>
                         <color key="backgroundColor" systemColor="systemBackgroundColor"/>
+                        <constraints>
+                            <constraint firstItem="qiU-10-KHL" firstAttribute="top" secondItem="14s-Rl-VrW" secondAttribute="bottom" constant="1" id="1q5-8o-K9q"/>
+                            <constraint firstItem="drO-cs-iXw" firstAttribute="centerY" secondItem="Gvk-Im-cVz" secondAttribute="centerY" id="89N-XZ-DF1"/>
+                            <constraint firstItem="qdJ-BB-eZ2" firstAttribute="bottom" secondItem="hwT-Fe-fZt" secondAttribute="bottom" constant="100" id="Amp-vD-xMa"/>
+                            <constraint firstItem="hwT-Fe-fZt" firstAttribute="height" secondItem="o2c-DZ-l6j" secondAttribute="height" id="Cbg-Yh-ntP"/>
+                            <constraint firstItem="o2c-DZ-l6j" firstAttribute="centerX" secondItem="BH6-Wf-kE3" secondAttribute="centerX" id="HuQ-9a-ZqV"/>
+                            <constraint firstItem="Gvk-Im-cVz" firstAttribute="leading" secondItem="qdJ-BB-eZ2" secondAttribute="leading" constant="40" id="IhV-e4-WUO"/>
+                            <constraint firstItem="qdJ-BB-eZ2" firstAttribute="trailing" secondItem="drO-cs-iXw" secondAttribute="trailing" constant="40" id="LW6-JT-xpR"/>
+                            <constraint firstItem="qiU-10-KHL" firstAttribute="centerX" secondItem="BH6-Wf-kE3" secondAttribute="centerX" id="MTX-Zs-qWM"/>
+                            <constraint firstItem="o2c-DZ-l6j" firstAttribute="top" secondItem="14s-Rl-VrW" secondAttribute="bottom" constant="-69" id="ciF-jk-Q0C"/>
+                            <constraint firstItem="qdJ-BB-eZ2" firstAttribute="bottom" secondItem="drO-cs-iXw" secondAttribute="bottom" constant="35" id="dBs-3P-oJN"/>
+                            <constraint firstItem="14s-Rl-VrW" firstAttribute="centerX" secondItem="BH6-Wf-kE3" secondAttribute="centerX" id="gh9-n4-35k"/>
+                            <constraint firstItem="14s-Rl-VrW" firstAttribute="top" secondItem="qdJ-BB-eZ2" secondAttribute="top" constant="349" id="irc-LZ-30a"/>
+                            <constraint firstItem="hwT-Fe-fZt" firstAttribute="centerX" secondItem="BH6-Wf-kE3" secondAttribute="centerX" id="kCR-5R-b6m"/>
+                        </constraints>
                     </view>
                     <navigationItem key="navigationItem" id="dER-jT-1W6"/>
                     <connections>
@@ -299,17 +321,18 @@
                         <outlet property="currentTime" destination="14s-Rl-VrW" id="Ygh-u0-Kr1"/>
                         <outlet property="mapContainerView" destination="nsc-rK-tJr" id="YXa-Kw-cQW"/>
                         <outlet property="nextMode" destination="drO-cs-iXw" id="aFD-l9-NkG"/>
+                        <outlet property="stepsLabel" destination="qiU-10-KHL" id="LvH-32-Tgb"/>
                     </connections>
                 </viewController>
                 <placeholder placeholderIdentifier="IBFirstResponder" id="x9g-4P-6Sm" userLabel="First Responder" customClass="UIResponder" sceneMemberID="firstResponder"/>
             </objects>
             <point key="canvasLocation" x="1056.9230769230769" y="704.50236966824639"/>
         </scene>
-        <!--View Controller-->
+        <!--End View Controller-->
         <scene sceneID="rJN-Fs-Zz8">
             <objects>
-                <viewController id="n7d-qZ-gcw" sceneMemberID="viewController">
-                    <view key="view" contentMode="scaleToFill" id="o9L-wy-cOc" customClass="EndViewController">
+                <viewController id="n7d-qZ-gcw" customClass="EndViewController" customModule="Fast_Walk" customModuleProvider="target" sceneMemberID="viewController">
+                    <view key="view" contentMode="scaleToFill" id="o9L-wy-cOc">
                         <rect key="frame" x="0.0" y="0.0" width="390" height="844"/>
                         <autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/>
                         <viewLayoutGuide key="safeArea" id="ibX-h1-fL2"/>
@@ -404,6 +427,11 @@
     </scenes>
     <resources>
         <image name="google.png" width="18" height="18"/>
+        <image name="playpause.fill" catalog="system" width="128" height="69"/>
+        <image name="stop.circle.fill" catalog="system" width="128" height="123"/>
+        <namedColor name="AccentColor">
+            <color red="0.0" green="0.46000000000000002" blue="0.89000000000000001" alpha="1" colorSpace="custom" customColorSpace="sRGB"/>
+        </namedColor>
         <systemColor name="separatorColor">
             <color red="0.23529411764705882" green="0.23529411764705882" blue="0.2627450980392157" alpha="0.28999999999999998" colorSpace="custom" customColorSpace="sRGB"/>
         </systemColor>
diff --git a/Fast_Walk/Route/EndViewController.swift b/Fast_Walk/Route/EndViewController.swift
index a137114..8b09e67 100644
--- a/Fast_Walk/Route/EndViewController.swift
+++ b/Fast_Walk/Route/EndViewController.swift
@@ -7,10 +7,10 @@
 
 import UIKit
 
-class EndViewController: UIViewController {
+class EndViewController: EndScreenViewController{
 
-    override func viewDidLoad() {
-        super.viewDidLoad()
+    override func viewWillAppear(_ animated: Bool) {
+        super.viewWillAppear(animated)
 
         // Do any additional setup after loading the view.
     }
diff --git a/Fast_Walk/Route/RouteViewController.swift b/Fast_Walk/Route/RouteViewController.swift
index 1416efd..35e6d07 100644
--- a/Fast_Walk/Route/RouteViewController.swift
+++ b/Fast_Walk/Route/RouteViewController.swift
@@ -2,7 +2,7 @@ import UIKit
 import GoogleMaps
 import CoreLocation 
 
-class RouteViewController: UIViewController, CLLocationManagerDelegate {
+class RouteViewController: HealthKitDemoViewController, CLLocationManagerDelegate {
     @IBOutlet weak var mapContainerView: UIView!
     @IBOutlet var currentMode: UILabel!
     @IBOutlet var currentTime: UILabel!
@@ -10,6 +10,7 @@ class RouteViewController: UIViewController, CLLocationManagerDelegate {
     var routeDetails: RouteDetails?
     var mapView: GMSMapView?
     
+    
     var mode: String = "slow"
     var timer: Timer!
     var countdown: Int = 0
@@ -28,10 +29,17 @@ class RouteViewController: UIViewController, CLLocationManagerDelegate {
             setupAndDisplayRouteOnMap(routeDetails: routeDetails)
         }
 
-        modeText()
+        modeSwitch()
         configureLocationManager()
         
         setupCircularProgressView()
+        //setup timer circle view shape.
+        currentTime.layer.backgroundColor = UIColor.white.cgColor
+        currentTime.layer.borderWidth = 8
+        currentTime.layer.borderColor = UIColor.systemBlue.cgColor
+        currentTime.textColor = .systemBlue
+        currentTime.layer.cornerRadius = currentTime.frame.size.height / 2
+        
     }
     
     override func viewDidAppear(_ animated: Bool) {
@@ -42,6 +50,8 @@ class RouteViewController: UIViewController, CLLocationManagerDelegate {
     }
     
     @IBAction func startTimer() {
+        super.startWorkoutSession()
+        
         if start == "start"{
             startTimer(resume: false)
             start = "running"
@@ -56,7 +66,11 @@ class RouteViewController: UIViewController, CLLocationManagerDelegate {
     }
     
     @IBAction func endTimer() {
-        timer.invalidate()
+        if timer != nil{
+            timer.invalidate()
+        }
+        
+       
         
     }
     
@@ -82,22 +96,23 @@ class RouteViewController: UIViewController, CLLocationManagerDelegate {
         if countdown < 0 {
             if mode == "slow"{
                 mode = "fast"
-                modeText()
+                modeSwitch()
             } else {
                 mode = "slow"
-                modeText()
+                modeSwitch()
             }
             startTimer(resume: false)
         }
     }
     
-    func modeText() {
+    func modeSwitch() {
+        super.fetchStepData()
         if mode == "slow" {
             currentMode.text = "ゆっくり歩き"
-            nextMode.text = "さっさか歩き"
+            nextMode.text = "Next: さっさか歩き"
         } else if mode == "fast" {
             currentMode.text = "さっさか歩き"
-            nextMode.text = "ゆっくり歩き"
+            nextMode.text = "Next: ゆっくり歩き"
         }
     }
     
@@ -173,7 +188,7 @@ class RouteViewController: UIViewController, CLLocationManagerDelegate {
     
     func setupCircularProgressView() {
         let circularProgressView = CircularProgressView(frame: CGRect(x: 0, y: 0, width: 100, height: 100))
-        circularProgressView.center = CGPoint(x: view.center.x, y: view.center.y + 150) // Adjust position as needed
+        circularProgressView.center = CGPoint(x: view.center.x, y: view.center.y - 150) // Adjust position as needed
         circularProgressView.progressColor = .blue // Customize the progress color
         circularProgressView.trackColor = .lightGray // Customize the track color
         circularProgressView.setProgress(to: 0.0) // Initial progress
